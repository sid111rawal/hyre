// prisma/schema.prisma

generator client {
  binaryTargets = ["native"]
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://neondb_owner:npg_g4SYHnsNA2lq@ep-old-term-a1iyh3fx-pooler.ap-southeast-1.aws.neon.tech/neondb?sslmode=require"
}

enum Roles {
  ADMIN
  CUSTOMER_SERVICE
  EMPLOYER
  WORKER
}

model User {  
  id        String   @id @default(uuid()) @db.Uuid
  email     String   @unique
  name      String?
  username String @unique
  password  String 
  role Roles @default(WORKER)
  approved    Boolean   @default(false)
  isAdmin  Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("users")

}


// --- Job & Application Models ---
model Job {
  id          String   @id @default(cuid())
  title       String
  description String?
  category    String
  pay         Float    // Use Float for currency amounts
  time        String   // e.g., "4:30 PM - 9:00 PM"
  status      String   @default("open") // e.g., open, filled, completed

  employerId  String
  

  applications Application[] // Relation: One Job has many Applications

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([employerId]) // Index for faster lookups by employer
}

model Application {
  id         String   @id @default(cuid())
  status     String   @default("pending") // e.g., pending, accepted, rejected

  jobId      String
  job        Job      @relation(fields: [jobId], references: [id], onDelete: Cascade) // Relation: Belongs to one Job

  workerId   String
  

  appliedAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([jobId, workerId]) // Ensure a worker can apply only once per job
  @@index([jobId])
  @@index([workerId])
}